paths:
  /table/booktable: #Book a table API
    post:
      summary: Book a table
      description: Allows a user to book a table if it is available. If the table is already booked, it provides a list of available tables.
      tags:
        - Table
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tableId:
                  type: string
                  description: The ID of the table to be booked.
              required:
                - tableId
      responses:
        "201":
          description: Table booked successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Table booked successfully
                  TABLE_ACCESS_TOKEN:
                    type: string
                    description: JWT token for the booked table session.
        "400":
          description: Bad request. Missing or invalid data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errMsg:
                    type: string
                    example: Please provide table ID
        "404":
          description: Table not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errMsg::
                    type: string
                    example: Table does not exist
        "409":
          description: Conflict. Table is already booked.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errMsg:
                    type: string
                    example: Table is booked. Please book another one, here are the available tables
                  availablieTables:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: The ID of the available table.
                        name:
                          type: string
                          description: The name of the available table.
                        floor:
                          type: string
                          description: The floor where the table is located.
                        tableId:
                          type: string
                          description: The ID of the available table.
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error

  /table/new:
    post:
      summary: Create a new table
      description: Create a new table in the system with a unique table ID and optional floor information
      tags:
        - Table
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tableId:
                  type: string
                  description: Unique ID for the new table
                floor:
                  type: integer
                  description: The floor where the table is located (Optional)
                  example: 0
              required:
                - tableId
      responses:
        "201":
          description: Table created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Table 12345 inserted successfully
        "400":
          description: Bad Request – Missing table ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Please enter table ID
        "409":
          description: Conflict – Table ID already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Table ID must be Unique
        "422":
          description: Unprocessable Entity – Validation error for input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Please type a valid floor number for the new table
                additionalProperties: false
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal server error

  /table/bill:
    get:
      summary: Get table bill
      description: This is used for customers to get this table bill, do not pass anydata, every thing is on token
      operationId: getTableBill
      tags:
        - Table
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Orders successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      type: object
                      properties:
                        items:
                          type: array
                          items:
                            type: object
                            properties:
                              itemName:
                                type: string
                              quantity:
                                type: integer
                              decorations:
                                type: array
                                items:
                                  type: string
                              description:
                                type: string
                                nullable: true
                              price:
                                type: number
                              costPerUnit:
                                type: number
                        totalPrice:
                          type: number
                        orderedAt:
                          type: string
                          example: 18 May 2025
                        status:
                          type: string
                          example: Pending
        "400":
          description: Bad request - missing or invalid table ID, table is not booked, 
          content:
            application/json:
              schema:
                type: object
                properties:
                  errMsg:
                    type: string
                    example: Please provide table ID
        "404":
          description: Table does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  errMsg:
                    type: string
                    example: Table does not exist
        "401":
          description: Unauthorized - token expired or access denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  errMsg:
                    type: string
                    example: Invalid token
                  closeSession:
                    type: boolean
                    example: true

        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errMsg:
                    type: string
                    example: Internal server error

  /table/clean/{tableId}:
    patch:
      tags:
        - Table
      summary: Clean the table
      description: Manager cleans a table, archives its current orders, and marks it as available.
      parameters:
        - name: tableId
          in: path
          required: true
          description: ID of the table to clean
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Table cleaned successfully
          content:
            application/json:
              example:
                message: Table cleaned successfully and ready for use
        "400":
          description: Bad Request - table already cleaned, invalid table ID
          content:
            application/json:
              example:
                errMsg: Please provide table ID
        "404":
          description: Not Found
          content:
            application/json:
              example:
                errMsg: Table does not exist
        "401":
          description: Unauthorized - token expired or access denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  errMsg:
                    type: string
                    example: Invalid token
                  closeSession:
                    type: boolean
                    example: true
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                errMsg: Internal server error
  
  /table/tablesDetails:
    get:
      tags:
        - Table
      summary: Get tables with their related orders and items
      description: Returns all tables along with their orders, items, and item details. Requires manager token authorization.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of tables with their associated orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  tablesWithOrders:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: table_01
                        status:
                          type: string
                          example: Booked
                        floor:
                          type: integer
                          example: 1
                        orders:
                          type: array
                          items:
                            type: object
                            properties:
                              _id:
                                type: string
                                example: 683ca8155b19219bd1f7d9b3
                              status:
                                type: string
                                example: Pending
                              totalPrice:
                                type: number
                                example: 15
                              orderedAt:
                                type: string
                                example: 01 June 2025 - 22:20
                              updatedAt:
                                type: string
                                nullable: true
                                example: null
                              orderItems:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    itemId:
                                      type: string
                                      example: 6831e30e13de4f593da5bec9
                                    itemName:
                                      type: string
                                      example: Baklava
                                    itemImage:
                                      type: string
                                      example: baklava.png
                                    quantity:
                                      type: integer
                                      example: 3
                                    costPerUnit:
                                      type: number
                                      example: 5
                                    price:
                                      type: number
                                      example: 15
                                    decorations:
                                      type: array
                                      items:
                                        type: string
                                      example: []
                                    description:
                                      type: string
                                      nullable: true
                                      example: null
        "401":
          description: Unauthorized - token expired or access denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  errMsg:
                    type: string
                    example: Invalid token
                  closeSession:
                    type: boolean
                    example: true
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errMsg:
                    type: string
                    example: Internal server error